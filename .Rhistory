x <- c(1:70)
x[1:length(x)%%7 != 0]
x[c(rep(T, 6), 7)]
x[c(rep(T, 6), F)]
x[1:length(x)%%7 > 0]
x <- c(-35:35)
x[1:length(x)%%7 != 0]
x[c(rep(T, 6), F)]
x[1:length(x)%%7 > 0]
x[-(1:floor(length(x)/7)*7)]
x[c(rep(T, 6), F)]
x[1:length(x)%%7 > 0] #
x[-(seq(7, length(x), by = 7))]
letters[c(1,23,5,19,15,13,5)]
divide <- function(x, y) {
x / y
}
divide <- function(x, y) {
x / y
}
divide <- function(x, y) {
return(x/y)
}
divide(1, 0)
divide(-99999, 0)
divide(0, 0)
divide(Inf, Inf)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
length(x[x > -0.2 & x < 0.3])
?floor
runif(100, min min = 1, max = 7)
runif(100, min = 1, max = 7)
floor(runif(100, min = 1, max = 7))
dice_roll <- function(n) {
x <- runif(n, min = 1, max = 7)
return(floor(x))
}
dice_roll(1e4)
n3 <- dice_roll(1e4)
n3[n3 ==7]
.libPaths()
installed.packages()
?installed.packages()
grid.newpage()
?grid.newpage()
library(grid)
?grid.newpage
grid.newpage()
grid.lines()
require(ggplot2)
install.packages("xts", dependencies = TRUE)
update.packages()
y
y
sessionInfo()
install.packages("randtoolbox")
library(randtoolbox)
1:5 + 0:1
1:10 + 3
(5:8)^2
1:4 >= 3
x <- seq(10, 100, by = 10)
?[]
?"[]"
?"["
x[]
x[1]
x[3:4]
x[c(8,7,3,6:8,x[1])]
x[-5]
x[-(2:6)]
x[c(-3, -5, -length(x), -5)]
x[rep(c(TRUE, FALSE), 5)]
x[c(TRUE, FALSE)]
x[x > 77 & x < 99]
names(x) <- c("one", "two", "three", "four", "five", "six", "seven", "eigth", "nine", "ten")
str(x)
x[c("one", "three")]
x[c("one", "forty")]
all(x < 200)
all(x > 20)
any(x == 100)
which(x >= 50)
which.min(x)
which.max(x)
y <- c(5, 3, 9)
names(x) <- c("V", "III", "IX")
attr(x, "author") <- "Caesar"
attributes(x)
attributes(y)
names(y) <- c("V", "III", "IX")
attr(y, "author") <- "Caesar"
attributes(y)
names(x) <- c("one", "two", "three", "four", "five", "six", "seven", "eigth", "nine", "ten")
str(y)
attributes(x) <- NULL
str(x)
attributes(y) <- NULL
str(y)
n21 <- 5
n22 <- 1:10
n23 <- 22:19
n24 <- c("A", "BBB", "Z")
n25 <- c("1", "99", "HI")
n26 <- c(TRUE, FALSE)
max(n21)
max(n22)
max(n23)
max(n24)
max(n25)
max(n25)
max(n26)
which(n21)
which(n22)
which(n26)
which(n25)
which.max(n21)
which.max(n22)
which.max(n23)
which.max(n24)
which.max(n25)
which.max(n26)
y <- vector(mode = "character", length = 100)
y <- character(100)
for (i in 1:100) {
if (i %% 15 == 0) {
y[i] <- "fizz buzz"
} else if (i %% 3 == 0) {
y[i] <- "fixx"
} else if (i %% 5 == 0) {
y[i] <- "buzz"
} else {
y[i] <- i
}
}
for (i in 1:100) {
if (i %% 15 == 0) {
y[i] <- "fizz buzz"
} else if (i %% 3 == 0) {
y[i] <- "fizz"
} else if (i %% 5 == 0) {
y[i] <- "buzz"
} else {
y[i] <- i
}
}
y
x <- 1:100
z <- 1:100
x %% 5
x %% 5 == 0
z[x %% 5 == 0] <- "buzz"
rm(list = c("n25", "n21"))
z[x %% 3 == 0] <- "fizz"
z[x %% 15 == 0] <- "fizz buzz"
all.equal(y, z)
x <- 2^(0:10)
log2(x)
set.seed(42)
x <- sample(1:100, 50)
x[-1]
x[-length(x)]
x[-1] - x[-length(x)]
which.max(abs(x[-1] - x[-length(x)]))
x[c(k, k+1)]
k <- which.max(abs(x[-1] - x[-length(x)]))
x[c(k, k+1)]
x <- sample(1:100, 50, replace = TRUE)
x
min(x)
which.min(x)
x[x == min(x)]
which(x == min(x))
maxdiff <- function(x) {
y <- abs(x[-1] - x[-length(x)])
k <- which(y == max(y))
print("First neighbor(s):")
print(x[k])
print("Second neighbor(s):")
print(x[k + 1])
print("Maximum absolute diff is:")
print(max(y))
}
xx <- sample(1:100, 1e4, replace = TRUE)
maxdiff(xx)
rm("x")
rm("k")
n51 <- c(0, 0, 3, 4, 4, 8)
n51[-1]-n[-length(n51)]
n51[-1]-n51[-length(n51)]
all((n51[-1]-n51[-length(n51)]) >= 0)
??"logical operations"
??"and"
??"and"
?"and"
??and
'??and'
fun5 <- function(x) {
return(xor(all((x[-1]-x[-length(x)]) >= 0), all((x[-1]-x[-length(x)]) <= 0))
}
fun5 <- function(x) {
return(xor(all((x[-1]-x[-length(x)]) >= 0), all((x[-1]-x[-length(x)]) <= 0)))
}
fun5(n51)
fun5(rep(0,10))
fun5 <- function(x) {
return(all((x[-1]-x[-length(x)]) >= 0) | all((x[-1]-x[-length(x)]) <= 0))
}
fun5(n51)
fun5(rep(0,10))
fun5(5)
?diff
diff(n51)
?function
?'function'
?`function`
?factorial
combin_count <- function(n, k, with_repetitions = FALSE) {
if (with_repetitions == TRUE) {
ans <- factorial(n+k-1)/(factorial(k)*factorial(n-1))
} else {
ans <- factorial(n)/(factorial(k)*factorial(n-k))
}
return(ans)
}
combin_count(1,5,with_repetitions = TRUE)
combin_count(2,5,with_repetitions = TRUE)
combin_count(2,5)
combin_count(5,2)
combin_count(5,2, with_repetitions = TRUE)
setwd("/media/glycosylase/EC6A2F256A2EEBD0/Documents and Settings/miffka/Documents/!DataMining/RBasics")
setwd("/media/glycosylase/EC6A2F256A2EEBD0/Users/miffka/Documents/!DataMining/Stats2")
task2 <- read.csv("https://stepik.org/media/attachments/lesson/32437/gym_data.csv")
str(task2)
?lm
View(task2)
?task2
table(task2)
?aov
aov(money ~ day, task2)
summary(aov(money ~ day, task2))
?pirsons
??pirsons
?t.test
t.test(money ~ day, task2)
summary(aov(money ~ day, task2))
task21 <- aov(money ~ day, task2)
summary(task21)[[1]]$'Pr(>F)'[1]
Inter <- 1.433570e+01
bal <- -1.197759e-03
debt <- -2.502676e-02
infl <- 1.735660e-01
labfor <- -1.801842e-08
20e+06
task3 <- Inter + bal*0 + debt*48 + infl*3 + labfor*20e+06
e^task3
exp(task3)
task4 <- read.csv("https://stepik.org/media/attachments/lesson/33474/contigency_table_analysis_2.csv")
str(task4)
View(task4)
table(task4)
str(task4)
?within
within(task4,
X <- factor(X),
A <- factor(A),
B <- factor(B),
C <- factor(C))
task41 <- within(task4,
X <- factor(X),
A <- factor(A),
B <- factor(B),
C <- factor(C))
str(task41)
rm("task41")
task4 <- read.csv("https://stepik.org/media/attachments/lesson/33474/contigency_table_analysis_2.csv")
task4$A <- as.factor(task4$A)
task4$B <- as.factor(task4$B)
task4$C <- as.factor(task4$C)
str(task4)
table(task4)
table(task4[, 2:4])
table(task4[, 2:3])
?fisher.test
task41 <- table(task4[, 2:3])
fisher.test(task41)
fit4 <- fisher.test(task41)
summary(fit4)
task4 <- read.csv("https://stepik.org/media/attachments/lesson/33474/contigency_table_analysis_2.csv")
task4$A <- as.factor(task4$A)
task4$B <- as.factor(task4$B)
task41 <- table(task4[, 2:3])
fit4 <- fisher.test(task41)
fit4$p.value
fit41 <- chisq.test(task41)
fit41$p.value
task6 <- read.csv("https://stepik.org/media/attachments/lesson/32437/hierarchical_clustering_1.csv")
task6 <- read.csv("https://stepik.org/media/attachments/lesson/32437/hierarchical_clustering_1.csv")
centr6 <- read.csv("https://stepik.org/media/attachments/lesson/33474/centers_2.csv")
centr6[[1]]
centr6[1]
centr6[,1]
View(centr6)
?kmeans
str(task6)
kmeans(task6, centr6)
str(centr6)
centr6[,-1]
centr61 <- centr6[,-1]
kmeans(task6, centr61)
kmeans(task6, centr61)$cluster
task6$clust <- kmeans(task6, centr61)$cluster
str(task6)
table(task6$clust)
task8 <- read.csv("https://stepik.org/media/attachments/lesson/32437/world_finance_data.csv")
head(task8[,-1])
fit8 <- prcomp(task8[, -1])
summary(fit8)
summary(fit8)$importance
head(task8[,-1])
prcomp(task8[, -1])
head(task8[,-1])
summary(fit8)$importance
is_multicol <- function(d){
d <- abs(cor(d))    #строим модуль матрицы корреляции
d[lower.tri(d)] <- 0    #зануляем нижний треугольник матрицы корреляции
diag(d) <- 0    #зануляем диагональ матрицы корреляции
index <- which((1-d) < 1e-10, arr.ind = T)    #заполняем вектор значениями индекса для единиц
if (length(index) == 0){
return('There is no collinearity in the data')
} else {
return(rownames(d)[index])    #выводим названия строк)
}
}
is_multicol(task8)
is_multicol(task8[, -1])
abs(cor(task8[, -1]))
princomp(mtcars[,c("mpg", "wt")])
prcomp(swiss, center = T)
factanal(swiss, factors = 2, rotation = "varimax")
summary(fit8)$importance
summary(fit8)$importance[3,]
fit81 <- summary(fit8)
summary(fit8)
str(task8)
task81 <- task8[, -1]
head(task81)
fit8 <- prcomp(task81)
??"normalize data"
library(QuantPsyc)
sapply(task81, Normalize)
task82 <- sapply(task81, Normalize)
fit8 <- prcomp(task82)
fit81 <- summary(fit8)
fit81$importance
task82 <- sapply(task81, scale)
fit8 <- prcomp(task82)
fit81 <- summary(fit8)
fit81$importance
fit81$importance[3, 3]
View(task82)
Inter <- 1.433570e+01
bal <- -1.197759e-03
debt <- -2.502676e-02
infl <- 1.735660e-01
labfor <- -1.801842e-08
task3 <- Inter + bal*0 + debt*48 + infl*3 + labfor*20e+06
task3
